(function () {
'use strict';

/* global HeadersBehaviors */

Polymer({
  is: 'wsse-support',
  behaviors: [
    HeadersBehaviors.FillSupportBehavior
  ],
  hostAttributes: {
    'header-support': 'x-wsse'
  },
  properties: {
    login: String,
    password: String,
    nonce: String,
    lastGeneratedNonce: {
      type: String,
      value: "init" // Default value is used to be able to apply auto generation when user come from saved form
    },
    nonceAsBase64: {
      type: Boolean,
      value: true
    },
    date: String,
    lastGeneratedDate: {
      type: String,
      value: "init" // Default value is used to be able to apply auto generation when user come from saved form
    }
  },
  detached: function () {
    if (this._refreshEventCb) {
      this.disableSupport();
    }
  },
  // Add an event to refresh digest automatically after each request
  enableSupport: function () {
    var self = this;
    this._refreshEventCb = function (e) {
      if (e && e.target && e.target.nodeName === 'ARC-REQUEST-CONTROLLER') {
        self._refreshValue();
      }
    };
    document.querySelector('body').addEventListener('ready', this._refreshEventCb);
  },
  // Remove event that refresh value
  disableSupport: function () {
    document.querySelector('body').removeEventListener('ready', this._refreshEventCb);
    this._refreshEventCb = null;
  },
  provideSupport: function () {
    this._setCurrentValues(this._getCurrentValue());
    this.open();
  },
  _generateNonce: function () {
    var nonceChars = "0123456789abcdef";
    var result = "";
    for (var i = 0; i < 16; i++) {
      result += nonceChars.charAt(Math.floor(Math.random() * nonceChars.length));
    }
    return result;
  },
  _generateDate: function () {
    var date = new Date();
    var yyyy = date.getUTCFullYear();
    var mm = (date.getUTCMonth() + 1);
    if (mm < 10) mm = "0" + mm;
    var dd = (date.getUTCDate());
    if (dd < 10) dd = "0" + dd;
    var hh = (date.getUTCHours());
    if (hh < 10) hh = "0" + hh;
    var mn = (date.getUTCMinutes());
    if (mn < 10) mn = "0" + mn;
    var ss = (date.getUTCSeconds());
    if (ss < 10) ss = "0" + ss;
    return yyyy + "-" + mm + "-" + dd + "T" + hh + ":" + mn + ":" + ss + "Z";
  },
  // Analyse element properties to get current value
  _getCurrentValue: function () {
    var currentValue;
    if (this.model) {
      currentValue = this.model.get('item.value');
    } else if (this.target) {
      currentValue = this.target.value;
    } else {
      currentValue = this.value;
    }
    return currentValue;
  },
  // Sets values in form from current inpits in headers editor
  _setCurrentValues: function (currentValue) {
    if (currentValue) {
      var regex = /Username="(.*)", PasswordDigest="(.*)", Nonce="(.*)", Created="(.*)"/;
      var matches = currentValue.match(regex);
      if (matches && matches.length == 5) {
        // Login
        this.set('login', matches[1]);
        // Nonce
        var nonce = matches[3];
        // Try to define is non is base64 or not
        try {
          nonce = CryptoJS.enc.Base64.parse(nonce).toString(CryptoJS.enc.Utf8);
          this.set('nonceAsBase64', true);
        } catch (e) {
          this.set('nonceAsBase64', false);
        }
        // Apply on form only if nonce is not last autogenerated one
        if (!this.lastGeneratedNonce || (this.lastGeneratedNonce !== 'init' && this.lastGeneratedNonce !== nonce)) {
          this.set('nonce', nonce);
        }
        // Date
        // Apply on form only if date is not last autogenerated one
        if (!this.lastGeneratedDate || this.lastGeneratedDate !== 'init' && this.lastGeneratedDate !== matches[4]) {
          this.set('date', matches[4]);
        }
      }
    }
  },
  _cancel: function (e) {
    this.cancel(e);
  },
  _select: function () {
    if (this.nonce) {
      var nonce = this.nonce;
      this.lastGeneratedNonce = '';
    } else {
      var nonce = this._generateNonce();
      this.lastGeneratedNonce = nonce;
    }
    if (this.date) {
      var date = this.date;
      this.lastGeneratedDate = '';
    } else {
      var date = this._generateDate();
      this.lastGeneratedDate = date;
    }
    var toEncode = nonce + date + this.password;
    var sha1 = CryptoJS.SHA1(toEncode);
    var digest = sha1.toString(CryptoJS.enc.Base64);
    var nonce64 = nonce;
    if (this.nonceAsBase64) {
      nonce64 = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(nonce64))
    }
    this.setValue('UsernameToken Username="' + this.login + '", PasswordDigest="' + digest + '", Nonce="' + nonce64 + '", Created="' + date + '"');
  },
  _refreshValue: function (e) {
    this._setCurrentValues(this._getCurrentValue());
    this._select();
  },
  authTogglePassword: function (e) {
    var input = this.$.authDialogPassword;
    var icon = e.target;
    if (input.type === 'password') {
      input.type = 'text';
      icon.icon = 'visibility-off';
    } else {
      input.type = 'password';
      icon.icon = 'visibility';
    }
  }
});
})();